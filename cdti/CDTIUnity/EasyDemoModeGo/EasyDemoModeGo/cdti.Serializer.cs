// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Example
{
    [System.Serializable()]
    public partial class Vector
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector Deserialize(Stream stream)
        {
            Vector instance = new Vector();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector DeserializeLengthDelimited(Stream stream)
        {
            Vector instance = new Vector();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static Vector DeserializeLength(Stream stream, int length)
        {
            Vector instance = new Vector();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static Vector Deserialize(byte[] buffer)
        {
            Vector instance = new Vector();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.Vector Deserialize(byte[] buffer, Example.Vector instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.Vector Deserialize(Stream stream, Example.Vector instance)
        {
            BinaryReader br = new BinaryReader(stream);
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.Vector DeserializeLengthDelimited(Stream stream, Example.Vector instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.Vector DeserializeLength(Stream stream, int length, Example.Vector instance)
        {
            BinaryReader br = new BinaryReader(stream);
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed32
                    case 13:
                        instance.X = br.ReadSingle();
                        continue;
                    // Field 2 Fixed32
                    case 21:
                        instance.Y = br.ReadSingle();
                        continue;
                    // Field 3 Fixed32
                    case 29:
                        instance.Z = br.ReadSingle();
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, Vector instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed32
            stream.WriteByte(13);
            bw.Write(instance.X);
            // Key for field: 2, Fixed32
            stream.WriteByte(21);
            bw.Write(instance.Y);
            // Key for field: 3, Fixed32
            stream.WriteByte(29);
            bw.Write(instance.Z);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(Vector instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, Vector instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class CDTIPlane
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CDTIPlane Deserialize(Stream stream)
        {
            CDTIPlane instance = new CDTIPlane();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CDTIPlane DeserializeLengthDelimited(Stream stream)
        {
            CDTIPlane instance = new CDTIPlane();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CDTIPlane DeserializeLength(Stream stream, int length)
        {
            CDTIPlane instance = new CDTIPlane();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CDTIPlane Deserialize(byte[] buffer)
        {
            CDTIPlane instance = new CDTIPlane();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.CDTIPlane Deserialize(byte[] buffer, Example.CDTIPlane instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.CDTIPlane Deserialize(Stream stream, Example.CDTIPlane instance)
        {
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Position == null)
                            instance.Position = Example.Vector.DeserializeLengthDelimited(stream);
                        else
                            Example.Vector.DeserializeLengthDelimited(stream, instance.Position);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Velocity == null)
                            instance.Velocity = Example.Vector.DeserializeLengthDelimited(stream);
                        else
                            Example.Vector.DeserializeLengthDelimited(stream, instance.Velocity);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.severity = (Example.CDTIPlane.Severity)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.CDTIPlane DeserializeLengthDelimited(Stream stream, Example.CDTIPlane instance)
        {
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Position == null)
                            instance.Position = Example.Vector.DeserializeLengthDelimited(stream);
                        else
                            Example.Vector.DeserializeLengthDelimited(stream, instance.Position);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Velocity == null)
                            instance.Velocity = Example.Vector.DeserializeLengthDelimited(stream);
                        else
                            Example.Vector.DeserializeLengthDelimited(stream, instance.Velocity);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.severity = (Example.CDTIPlane.Severity)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.CDTIPlane DeserializeLength(Stream stream, int length, Example.CDTIPlane instance)
        {
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.Id = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Position == null)
                            instance.Position = Example.Vector.DeserializeLengthDelimited(stream);
                        else
                            Example.Vector.DeserializeLengthDelimited(stream, instance.Position);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        if (instance.Velocity == null)
                            instance.Velocity = Example.Vector.DeserializeLengthDelimited(stream);
                        else
                            Example.Vector.DeserializeLengthDelimited(stream, instance.Velocity);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.severity = (Example.CDTIPlane.Severity)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CDTIPlane instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Id == null)
                throw new ArgumentNullException("Id", "Required by proto specification.");
            // Key for field: 1, LengthDelimited
            stream.WriteByte(10);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.Id));
            if (instance.Position == null)
                throw new ArgumentNullException("Position", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            Example.Vector.Serialize(msField, instance.Position);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            if (instance.Velocity == null)
                throw new ArgumentNullException("Velocity", "Required by proto specification.");
            // Key for field: 3, LengthDelimited
            stream.WriteByte(26);
            ﻿msField.SetLength(0);
            Example.Vector.Serialize(msField, instance.Velocity);
            // Length delimited byte array
            uint length3 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length3);
            stream.Write(msField.GetBuffer(), 0, (int)length3);

            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.severity);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CDTIPlane instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CDTIPlane instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

    [System.Serializable()]
    public partial class CDTIReport
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CDTIReport Deserialize(Stream stream)
        {
            CDTIReport instance = new CDTIReport();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CDTIReport DeserializeLengthDelimited(Stream stream)
        {
            CDTIReport instance = new CDTIReport();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static CDTIReport DeserializeLength(Stream stream, int length)
        {
            CDTIReport instance = new CDTIReport();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static CDTIReport Deserialize(byte[] buffer)
        {
            CDTIReport instance = new CDTIReport();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Example.CDTIReport Deserialize(byte[] buffer, Example.CDTIReport instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Example.CDTIReport Deserialize(Stream stream, Example.CDTIReport instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.AdvisoryLevel = Example.CDTIReport.Severity.PROXIMATE;
            if (instance.Planes == null)
                instance.Planes = new List<Example.CDTIPlane>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                    case 9:
                        instance.Timestamp = br.ReadInt64();
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Ownship == null)
                            instance.Ownship = Example.CDTIPlane.DeserializeLengthDelimited(stream);
                        else
                            Example.CDTIPlane.DeserializeLengthDelimited(stream, instance.Ownship);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.AdvisoryMessage = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AdvisoryLevel = (Example.CDTIReport.Severity)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.Planes.Add(Example.CDTIPlane.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.CDTIReport DeserializeLengthDelimited(Stream stream, Example.CDTIReport instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.AdvisoryLevel = Example.CDTIReport.Severity.PROXIMATE;
            if (instance.Planes == null)
                instance.Planes = new List<Example.CDTIPlane>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                    case 9:
                        instance.Timestamp = br.ReadInt64();
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Ownship == null)
                            instance.Ownship = Example.CDTIPlane.DeserializeLengthDelimited(stream);
                        else
                            Example.CDTIPlane.DeserializeLengthDelimited(stream, instance.Ownship);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.AdvisoryMessage = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AdvisoryLevel = (Example.CDTIReport.Severity)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.Planes.Add(Example.CDTIPlane.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Example.CDTIReport DeserializeLength(Stream stream, int length, Example.CDTIReport instance)
        {
            BinaryReader br = new BinaryReader(stream);
            instance.AdvisoryLevel = Example.CDTIReport.Severity.PROXIMATE;
            if (instance.Planes == null)
                instance.Planes = new List<Example.CDTIPlane>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 Fixed64
                    case 9:
                        instance.Timestamp = br.ReadInt64();
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        if (instance.Ownship == null)
                            instance.Ownship = Example.CDTIPlane.DeserializeLengthDelimited(stream);
                        else
                            Example.CDTIPlane.DeserializeLengthDelimited(stream, instance.Ownship);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.AdvisoryMessage = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.AdvisoryLevel = (Example.CDTIReport.Severity)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        // repeated
                        instance.Planes.Add(Example.CDTIPlane.DeserializeLengthDelimited(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, CDTIReport instance)
        {
            BinaryWriter bw = new BinaryWriter(stream);
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            // Key for field: 1, Fixed64
            stream.WriteByte(9);
            bw.Write(instance.Timestamp);
            if (instance.Ownship == null)
                throw new ArgumentNullException("Ownship", "Required by proto specification.");
            // Key for field: 2, LengthDelimited
            stream.WriteByte(18);
            ﻿msField.SetLength(0);
            Example.CDTIPlane.Serialize(msField, instance.Ownship);
            // Length delimited byte array
            uint length2 = (uint)msField.Length;
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
            stream.Write(msField.GetBuffer(), 0, (int)length2);

            if (instance.AdvisoryMessage != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.AdvisoryMessage));
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)instance.AdvisoryLevel);
            if (instance.Planes != null)
            {
                foreach (var i5 in instance.Planes)
                {
                    // Key for field: 5, LengthDelimited
                    stream.WriteByte(42);
                    ﻿msField.SetLength(0);
                    Example.CDTIPlane.Serialize(msField, i5);
                    // Length delimited byte array
                    uint length5 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                    stream.Write(msField.GetBuffer(), 0, (int)length5);

                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(CDTIReport instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, CDTIReport instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}
