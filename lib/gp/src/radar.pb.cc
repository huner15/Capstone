// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION

#include "radar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

    const ::google::protobuf::Descriptor *RadarReport_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
            RadarReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_radar_2eproto() {
    protobuf_AddDesc_radar_2eproto();
    const ::google::protobuf::FileDescriptor *file =
            ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                    "radar.proto");
    GOOGLE_CHECK(file != NULL);
    RadarReport_descriptor_ = file->message_type(0);
    static const int RadarReport_offsets_[11] = {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, timestamp_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, range_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, azimuth_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, elevation_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, north_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, east_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, down_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, latitude_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, longitude_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, altitude_),
    };
    RadarReport_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
                    RadarReport_descriptor_,
                    RadarReport::default_instance_,
                    RadarReport_offsets_,
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, _has_bits_[0]),
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarReport, _unknown_fields_),
                    -1,
                    ::google::protobuf::DescriptorPool::generated_pool(),
                    ::google::protobuf::MessageFactory::generated_factory(),
                    sizeof(RadarReport));
}

namespace {

    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);

    inline void protobuf_AssignDescriptorsOnce() {
        ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                           &protobuf_AssignDesc_radar_2eproto);
    }

    void protobuf_RegisterTypes(const ::std::string &) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                RadarReport_descriptor_, &RadarReport::default_instance());
    }

}  // namespace

void protobuf_ShutdownFile_radar_2eproto() {
    delete RadarReport::default_instance_;
    delete RadarReport_reflection_;
}

void protobuf_AddDesc_radar_2eproto() {
    static bool already_here = false;
    if (already_here) return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            "\n\013radar.proto\"\301\001\n\013RadarReport\022\021\n\ttimesta"
                    "mp\030\001 \002(\020\022\r\n\005range\030\002 \002(\002\022\017\n\007azimuth\030\003 \002(\002"
                    "\022\021\n\televation\030\004 \002(\002\022\n\n\002id\030\005 \002(\017\022\r\n\005north"
                    "\030\006 \002(\002\022\014\n\004east\030\007 \002(\002\022\014\n\004down\030\010 \002(\002\022\020\n\010la"
                    "titude\030\t \002(\002\022\021\n\tlongitude\030\n \002(\002\022\020\n\010altit"
                    "ude\030\013 \002(\017B$\n\033edu.calpoly.capstone.sensor"
                    "B\005Radar", 247);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "radar.proto", &protobuf_RegisterTypes);
    RadarReport::default_instance_ = new RadarReport();
    RadarReport::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_radar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_radar_2eproto {
    StaticDescriptorInitializer_radar_2eproto() {
        protobuf_AddDesc_radar_2eproto();
    }
} static_descriptor_initializer_radar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RadarReport::kTimestampFieldNumber;
const int RadarReport::kRangeFieldNumber;
const int RadarReport::kAzimuthFieldNumber;
const int RadarReport::kElevationFieldNumber;
const int RadarReport::kIdFieldNumber;
const int RadarReport::kNorthFieldNumber;
const int RadarReport::kEastFieldNumber;
const int RadarReport::kDownFieldNumber;
const int RadarReport::kLatitudeFieldNumber;
const int RadarReport::kLongitudeFieldNumber;
const int RadarReport::kAltitudeFieldNumber;
#endif  // !_MSC_VER

RadarReport::RadarReport()
        : ::google::protobuf::Message() {
    SharedCtor();
    // @@protoc_insertion_point(constructor:RadarReport)
}

void RadarReport::InitAsDefaultInstance() {
}

RadarReport::RadarReport(const RadarReport &from)
        : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:RadarReport)
}

void RadarReport::SharedCtor() {
    _cached_size_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    range_ = 0;
    azimuth_ = 0;
    elevation_ = 0;
    id_ = 0;
    north_ = 0;
    east_ = 0;
    down_ = 0;
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarReport::~RadarReport() {
    // @@protoc_insertion_point(destructor:RadarReport)
    SharedDtor();
}

void RadarReport::SharedDtor() {
    if (this != default_instance_) {
    }
}

void RadarReport::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}

const ::google::protobuf::Descriptor *RadarReport::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return RadarReport_descriptor_;
}

const RadarReport &RadarReport::default_instance() {
    if (default_instance_ == NULL) protobuf_AddDesc_radar_2eproto();
    return *default_instance_;
}

RadarReport *RadarReport::default_instance_ = NULL;

RadarReport *RadarReport::New() const {
    return new RadarReport;
}

void RadarReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    if (_has_bits_[0 / 32] & 255) {
        ZR_(timestamp_, down_);
    }
    ZR_(latitude_, altitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool RadarReport::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:RadarReport)
    for (; ;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required sfixed64 timestamp = 1;
            case 1: {
                if (tag == 9) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                            input, &timestamp_)));
                    set_has_timestamp();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(21)) goto parse_range;
                break;
            }

                // required float range = 2;
            case 2: {
                if (tag == 21) {
                    parse_range:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &range_)));
                    set_has_range();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(29)) goto parse_azimuth;
                break;
            }

                // required float azimuth = 3;
            case 3: {
                if (tag == 29) {
                    parse_azimuth:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &azimuth_)));
                    set_has_azimuth();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(37)) goto parse_elevation;
                break;
            }

                // required float elevation = 4;
            case 4: {
                if (tag == 37) {
                    parse_elevation:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &elevation_)));
                    set_has_elevation();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(45)) goto parse_id;
                break;
            }

                // required sfixed32 id = 5;
            case 5: {
                if (tag == 45) {
                    parse_id:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                            input, &id_)));
                    set_has_id();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(53)) goto parse_north;
                break;
            }

                // required float north = 6;
            case 6: {
                if (tag == 53) {
                    parse_north:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &north_)));
                    set_has_north();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(61)) goto parse_east;
                break;
            }

                // required float east = 7;
            case 7: {
                if (tag == 61) {
                    parse_east:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &east_)));
                    set_has_east();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(69)) goto parse_down;
                break;
            }

                // required float down = 8;
            case 8: {
                if (tag == 69) {
                    parse_down:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &down_)));
                    set_has_down();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(77)) goto parse_latitude;
                break;
            }

                // required float latitude = 9;
            case 9: {
                if (tag == 77) {
                    parse_latitude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &latitude_)));
                    set_has_latitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(85)) goto parse_longitude;
                break;
            }

                // required float longitude = 10;
            case 10: {
                if (tag == 85) {
                    parse_longitude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &longitude_)));
                    set_has_longitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(93)) goto parse_altitude;
                break;
            }

                // required sfixed32 altitude = 11;
            case 11: {
                if (tag == 93) {
                    parse_altitude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                            input, &altitude_)));
                    set_has_altitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
                handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
        }
    }
    success:
    // @@protoc_insertion_point(parse_success:RadarReport)
    return true;
    failure:
    // @@protoc_insertion_point(parse_failure:RadarReport)
    return false;
#undef DO_
}

void RadarReport::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const {
    // @@protoc_insertion_point(serialize_start:RadarReport)
    // required sfixed64 timestamp = 1;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->timestamp(), output);
    }

    // required float range = 2;
    if (has_range()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->range(), output);
    }

    // required float azimuth = 3;
    if (has_azimuth()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azimuth(), output);
    }

    // required float elevation = 4;
    if (has_elevation()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->elevation(), output);
    }

    // required sfixed32 id = 5;
    if (has_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->id(), output);
    }

    // required float north = 6;
    if (has_north()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->north(), output);
    }

    // required float east = 7;
    if (has_east()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->east(), output);
    }

    // required float down = 8;
    if (has_down()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->down(), output);
    }

    // required float latitude = 9;
    if (has_latitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->latitude(), output);
    }

    // required float longitude = 10;
    if (has_longitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->longitude(), output);
    }

    // required sfixed32 altitude = 11;
    if (has_altitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->altitude(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:RadarReport)
}

::google::protobuf::uint8 *RadarReport::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8 *target) const {
    // @@protoc_insertion_point(serialize_to_array_start:RadarReport)
    // required sfixed64 timestamp = 1;
    if (has_timestamp()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->timestamp(), target);
    }

    // required float range = 2;
    if (has_range()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->range(), target);
    }

    // required float azimuth = 3;
    if (has_azimuth()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azimuth(), target);
    }

    // required float elevation = 4;
    if (has_elevation()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->elevation(), target);
    }

    // required sfixed32 id = 5;
    if (has_id()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->id(), target);
    }

    // required float north = 6;
    if (has_north()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->north(), target);
    }

    // required float east = 7;
    if (has_east()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->east(), target);
    }

    // required float down = 8;
    if (has_down()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->down(), target);
    }

    // required float latitude = 9;
    if (has_latitude()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->latitude(), target);
    }

    // required float longitude = 10;
    if (has_longitude()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->longitude(), target);
    }

    // required sfixed32 altitude = 11;
    if (has_altitude()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->altitude(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:RadarReport)
    return target;
}

int RadarReport::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // required sfixed64 timestamp = 1;
        if (has_timestamp()) {
            total_size += 1 + 8;
        }

        // required float range = 2;
        if (has_range()) {
            total_size += 1 + 4;
        }

        // required float azimuth = 3;
        if (has_azimuth()) {
            total_size += 1 + 4;
        }

        // required float elevation = 4;
        if (has_elevation()) {
            total_size += 1 + 4;
        }

        // required sfixed32 id = 5;
        if (has_id()) {
            total_size += 1 + 4;
        }

        // required float north = 6;
        if (has_north()) {
            total_size += 1 + 4;
        }

        // required float east = 7;
        if (has_east()) {
            total_size += 1 + 4;
        }

        // required float down = 8;
        if (has_down()) {
            total_size += 1 + 4;
        }

    }
    if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        // required float latitude = 9;
        if (has_latitude()) {
            total_size += 1 + 4;
        }

        // required float longitude = 10;
        if (has_longitude()) {
            total_size += 1 + 4;
        }

        // required sfixed32 altitude = 11;
        if (has_altitude()) {
            total_size += 1 + 4;
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                        unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void RadarReport::MergeFrom(const ::google::protobuf::Message &from) {
    GOOGLE_CHECK_NE(&from, this);
    const RadarReport *source =
            ::google::protobuf::internal::dynamic_cast_if_available<const RadarReport *>(
                    &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void RadarReport::MergeFrom(const RadarReport &from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
        if (from.has_range()) {
            set_range(from.range());
        }
        if (from.has_azimuth()) {
            set_azimuth(from.azimuth());
        }
        if (from.has_elevation()) {
            set_elevation(from.elevation());
        }
        if (from.has_id()) {
            set_id(from.id());
        }
        if (from.has_north()) {
            set_north(from.north());
        }
        if (from.has_east()) {
            set_east(from.east());
        }
        if (from.has_down()) {
            set_down(from.down());
        }
    }
    if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
        if (from.has_latitude()) {
            set_latitude(from.latitude());
        }
        if (from.has_longitude()) {
            set_longitude(from.longitude());
        }
        if (from.has_altitude()) {
            set_altitude(from.altitude());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarReport::CopyFrom(const ::google::protobuf::Message &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void RadarReport::CopyFrom(const RadarReport &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool RadarReport::IsInitialized() const {
    if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

    return true;
}

void RadarReport::Swap(RadarReport *other) {
    if (other != this) {
        std::swap(timestamp_, other->timestamp_);
        std::swap(range_, other->range_);
        std::swap(azimuth_, other->azimuth_);
        std::swap(elevation_, other->elevation_);
        std::swap(id_, other->id_);
        std::swap(north_, other->north_);
        std::swap(east_, other->east_);
        std::swap(down_, other->down_);
        std::swap(latitude_, other->latitude_);
        std::swap(longitude_, other->longitude_);
        std::swap(altitude_, other->altitude_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata RadarReport::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = RadarReport_descriptor_;
    metadata.reflection = RadarReport_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
