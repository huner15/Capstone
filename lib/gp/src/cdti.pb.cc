// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cdti.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION

#include "cdti.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

    const ::google::protobuf::Descriptor *Vector_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
            Vector_reflection_ = NULL;
    const ::google::protobuf::Descriptor *CDTIPlane_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
            CDTIPlane_reflection_ = NULL;
    const ::google::protobuf::EnumDescriptor *CDTIPlane_Severity_descriptor_ = NULL;
    const ::google::protobuf::Descriptor *CDTIReport_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
            CDTIReport_reflection_ = NULL;
    const ::google::protobuf::EnumDescriptor *CDTIReport_Severity_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cdti_2eproto() {
    protobuf_AddDesc_cdti_2eproto();
    const ::google::protobuf::FileDescriptor *file =
            ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                    "cdti.proto");
    GOOGLE_CHECK(file != NULL);
    Vector_descriptor_ = file->message_type(0);
    static const int Vector_offsets_[3] = {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
    };
    Vector_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
                    Vector_descriptor_,
                    Vector::default_instance_,
                    Vector_offsets_,
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _unknown_fields_),
                    -1,
                    ::google::protobuf::DescriptorPool::generated_pool(),
                    ::google::protobuf::MessageFactory::generated_factory(),
                    sizeof(Vector));
    CDTIPlane_descriptor_ = file->message_type(1);
    static const int CDTIPlane_offsets_[4] = {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, position_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, velocity_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, severity_),
    };
    CDTIPlane_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
                    CDTIPlane_descriptor_,
                    CDTIPlane::default_instance_,
                    CDTIPlane_offsets_,
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, _has_bits_[0]),
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, _unknown_fields_),
                    -1,
                    ::google::protobuf::DescriptorPool::generated_pool(),
                    ::google::protobuf::MessageFactory::generated_factory(),
                    sizeof(CDTIPlane));
    CDTIPlane_Severity_descriptor_ = CDTIPlane_descriptor_->enum_type(0);
    CDTIReport_descriptor_ = file->message_type(2);
    static const int CDTIReport_offsets_[5] = {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, timestamp_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, ownship_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, advisorymessage_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, advisorylevel_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, planes_),
    };
    CDTIReport_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
                    CDTIReport_descriptor_,
                    CDTIReport::default_instance_,
                    CDTIReport_offsets_,
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, _has_bits_[0]),
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, _unknown_fields_),
                    -1,
                    ::google::protobuf::DescriptorPool::generated_pool(),
                    ::google::protobuf::MessageFactory::generated_factory(),
                    sizeof(CDTIReport));
    CDTIReport_Severity_descriptor_ = CDTIReport_descriptor_->enum_type(0);
}

namespace {

    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);

    inline void protobuf_AssignDescriptorsOnce() {
        ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                           &protobuf_AssignDesc_cdti_2eproto);
    }

    void protobuf_RegisterTypes(const ::std::string &) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                Vector_descriptor_, &Vector::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                CDTIPlane_descriptor_, &CDTIPlane::default_instance());
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                CDTIReport_descriptor_, &CDTIReport::default_instance());
    }

}  // namespace

void protobuf_ShutdownFile_cdti_2eproto() {
    delete Vector::default_instance_;
    delete Vector_reflection_;
    delete CDTIPlane::default_instance_;
    delete CDTIPlane_reflection_;
    delete CDTIReport::default_instance_;
    delete CDTIReport_reflection_;
}

void protobuf_AddDesc_cdti_2eproto() {
    static bool already_here = false;
    if (already_here) return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            "\n\ncdti.proto\")\n\006Vector\022\t\n\001X\030\001 \002(\002\022\t\n\001Y\030\002"
                    " \002(\002\022\t\n\001Z\030\003 \002(\002\"\254\001\n\tCDTIPlane\022\n\n\002id\030\001 \002("
                    "\t\022\031\n\010position\030\002 \002(\0132\007.Vector\022\031\n\010velocity"
                    "\030\003 \002(\0132\007.Vector\022%\n\010severity\030\004 \002(\0162\023.CDTI"
                    "Plane.Severity\"6\n\010Severity\022\r\n\tPROXIMATE\020"
                    "\000\022\013\n\007TRAFFIC\020\001\022\016\n\nRESOLUTION\020\002\"\326\001\n\nCDTIR"
                    "eport\022\021\n\ttimestamp\030\001 \002(\020\022\033\n\007ownship\030\002 \002("
                    "\0132\n.CDTIPlane\022\027\n\017advisoryMessage\030\003 \001(\t\022+"
                    "\n\radvisoryLevel\030\004 \001(\0162\024.CDTIReport.Sever"
                    "ity\022\032\n\006planes\030\005 \003(\0132\n.CDTIPlane\"6\n\010Sever"
                    "ity\022\r\n\tPROXIMATE\020\000\022\013\n\007TRAFFIC\020\001\022\016\n\nRESOL"
                    "UTION\020\002B#\n\033edu.calpoly.capstone.sensorB\004"
                    "Cdti", 484);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "cdti.proto", &protobuf_RegisterTypes);
    Vector::default_instance_ = new Vector();
    CDTIPlane::default_instance_ = new CDTIPlane();
    CDTIReport::default_instance_ = new CDTIReport();
    Vector::default_instance_->InitAsDefaultInstance();
    CDTIPlane::default_instance_->InitAsDefaultInstance();
    CDTIReport::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cdti_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cdti_2eproto {
    StaticDescriptorInitializer_cdti_2eproto() {
        protobuf_AddDesc_cdti_2eproto();
    }
} static_descriptor_initializer_cdti_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
        : ::google::protobuf::Message() {
    SharedCtor();
    // @@protoc_insertion_point(constructor:Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector &from)
        : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:Vector)
}

void Vector::SharedCtor() {
    _cached_size_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
    // @@protoc_insertion_point(destructor:Vector)
    SharedDtor();
}

void Vector::SharedDtor() {
    if (this != default_instance_) {
    }
}

void Vector::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}

const ::google::protobuf::Descriptor *Vector::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return Vector_descriptor_;
}

const Vector &Vector::default_instance() {
    if (default_instance_ == NULL) protobuf_AddDesc_cdti_2eproto();
    return *default_instance_;
}

Vector *Vector::default_instance_ = NULL;

Vector *Vector::New() const {
    return new Vector;
}

void Vector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool Vector::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:Vector)
    for (; ;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required float X = 1;
            case 1: {
                if (tag == 13) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &x_)));
                    set_has_x();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(21)) goto parse_Y;
                break;
            }

                // required float Y = 2;
            case 2: {
                if (tag == 21) {
                    parse_Y:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &y_)));
                    set_has_y();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(29)) goto parse_Z;
                break;
            }

                // required float Z = 3;
            case 3: {
                if (tag == 29) {
                    parse_Z:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                            input, &z_)));
                    set_has_z();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
                handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
        }
    }
    success:
    // @@protoc_insertion_point(parse_success:Vector)
    return true;
    failure:
    // @@protoc_insertion_point(parse_failure:Vector)
    return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const {
    // @@protoc_insertion_point(serialize_start:Vector)
    // required float X = 1;
    if (has_x()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
    }

    // required float Y = 2;
    if (has_y()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
    }

    // required float Z = 3;
    if (has_z()) {
        ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:Vector)
}

::google::protobuf::uint8 *Vector::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8 *target) const {
    // @@protoc_insertion_point(serialize_to_array_start:Vector)
    // required float X = 1;
    if (has_x()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
    }

    // required float Y = 2;
    if (has_y()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
    }

    // required float Z = 3;
    if (has_z()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:Vector)
    return target;
}

int Vector::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // required float X = 1;
        if (has_x()) {
            total_size += 1 + 4;
        }

        // required float Y = 2;
        if (has_y()) {
            total_size += 1 + 4;
        }

        // required float Z = 3;
        if (has_z()) {
            total_size += 1 + 4;
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                        unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message &from) {
    GOOGLE_CHECK_NE(&from, this);
    const Vector *source =
            ::google::protobuf::internal::dynamic_cast_if_available<const Vector *>(
                    &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void Vector::MergeFrom(const Vector &from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_x()) {
            set_x(from.x());
        }
        if (from.has_y()) {
            set_y(from.y());
        }
        if (from.has_z()) {
            set_z(from.z());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector::CopyFrom(const ::google::protobuf::Message &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Vector::CopyFrom(const Vector &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Vector::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

    return true;
}

void Vector::Swap(Vector *other) {
    if (other != this) {
        std::swap(x_, other->x_);
        std::swap(y_, other->y_);
        std::swap(z_, other->z_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata Vector::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = Vector_descriptor_;
    metadata.reflection = Vector_reflection_;
    return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor *CDTIPlane_Severity_descriptor() {
    protobuf_AssignDescriptorsOnce();
    return CDTIPlane_Severity_descriptor_;
}

bool CDTIPlane_Severity_IsValid(int value) {
    switch (value) {
        case 0:
        case 1:
        case 2:
            return true;
        default:
            return false;
    }
}

#ifndef _MSC_VER
const CDTIPlane_Severity CDTIPlane::PROXIMATE;
const CDTIPlane_Severity CDTIPlane::TRAFFIC;
const CDTIPlane_Severity CDTIPlane::RESOLUTION;
const CDTIPlane_Severity CDTIPlane::Severity_MIN;
const CDTIPlane_Severity CDTIPlane::Severity_MAX;
const int CDTIPlane::Severity_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CDTIPlane::kIdFieldNumber;
const int CDTIPlane::kPositionFieldNumber;
const int CDTIPlane::kVelocityFieldNumber;
const int CDTIPlane::kSeverityFieldNumber;
#endif  // !_MSC_VER

CDTIPlane::CDTIPlane()
        : ::google::protobuf::Message() {
    SharedCtor();
    // @@protoc_insertion_point(constructor:CDTIPlane)
}

void CDTIPlane::InitAsDefaultInstance() {
    position_ = const_cast< ::Vector *>(&::Vector::default_instance());
    velocity_ = const_cast< ::Vector *>(&::Vector::default_instance());
}

CDTIPlane::CDTIPlane(const CDTIPlane &from)
        : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:CDTIPlane)
}

void CDTIPlane::SharedCtor() {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    id_ = const_cast< ::std::string *>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    position_ = NULL;
    velocity_ = NULL;
    severity_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTIPlane::~CDTIPlane() {
    // @@protoc_insertion_point(destructor:CDTIPlane)
    SharedDtor();
}

void CDTIPlane::SharedDtor() {
    if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        delete id_;
    }
    if (this != default_instance_) {
        delete position_;
        delete velocity_;
    }
}

void CDTIPlane::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}

const ::google::protobuf::Descriptor *CDTIPlane::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return CDTIPlane_descriptor_;
}

const CDTIPlane &CDTIPlane::default_instance() {
    if (default_instance_ == NULL) protobuf_AddDesc_cdti_2eproto();
    return *default_instance_;
}

CDTIPlane *CDTIPlane::default_instance_ = NULL;

CDTIPlane *CDTIPlane::New() const {
    return new CDTIPlane;
}

void CDTIPlane::Clear() {
    if (_has_bits_[0 / 32] & 15) {
        if (has_id()) {
            if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                id_->clear();
            }
        }
        if (has_position()) {
            if (position_ != NULL) position_->::Vector::Clear();
        }
        if (has_velocity()) {
            if (velocity_ != NULL) velocity_->::Vector::Clear();
        }
        severity_ = 0;
    }
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool CDTIPlane::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:CDTIPlane)
    for (; ;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required string id = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_id()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                            this->id().data(), this->id().length(),
                            ::google::protobuf::internal::WireFormat::PARSE,
                            "id");
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18)) goto parse_position;
                break;
            }

                // required .Vector position = 2;
            case 2: {
                if (tag == 18) {
                    parse_position:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                            input, mutable_position()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26)) goto parse_velocity;
                break;
            }

                // required .Vector velocity = 3;
            case 3: {
                if (tag == 26) {
                    parse_velocity:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                            input, mutable_velocity()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32)) goto parse_severity;
                break;
            }

                // required .CDTIPlane.Severity severity = 4;
            case 4: {
                if (tag == 32) {
                    parse_severity:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                            input, &value)));
                    if (::CDTIPlane_Severity_IsValid(value)) {
                        set_severity(static_cast< ::CDTIPlane_Severity >(value));
                    } else {
                        mutable_unknown_fields()->AddVarint(4, value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
                handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
        }
    }
    success:
    // @@protoc_insertion_point(parse_success:CDTIPlane)
    return true;
    failure:
    // @@protoc_insertion_point(parse_failure:CDTIPlane)
    return false;
#undef DO_
}

void CDTIPlane::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const {
    // @@protoc_insertion_point(serialize_start:CDTIPlane)
    // required string id = 1;
    if (has_id()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                this->id().data(), this->id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE,
                "id");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->id(), output);
    }

    // required .Vector position = 2;
    if (has_position()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                2, this->position(), output);
    }

    // required .Vector velocity = 3;
    if (has_velocity()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                3, this->velocity(), output);
    }

    // required .CDTIPlane.Severity severity = 4;
    if (has_severity()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
                4, this->severity(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:CDTIPlane)
}

::google::protobuf::uint8 *CDTIPlane::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8 *target) const {
    // @@protoc_insertion_point(serialize_to_array_start:CDTIPlane)
    // required string id = 1;
    if (has_id()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                this->id().data(), this->id().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE,
                "id");
        target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                        1, this->id(), target);
    }

    // required .Vector position = 2;
    if (has_position()) {
        target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(
                2, this->position(), target);
    }

    // required .Vector velocity = 3;
    if (has_velocity()) {
        target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(
                3, this->velocity(), target);
    }

    // required .CDTIPlane.Severity severity = 4;
    if (has_severity()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                4, this->severity(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:CDTIPlane)
    return target;
}

int CDTIPlane::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // required string id = 1;
        if (has_id()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->id());
        }

        // required .Vector position = 2;
        if (has_position()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                                  this->position());
        }

        // required .Vector velocity = 3;
        if (has_velocity()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                                  this->velocity());
        }

        // required .CDTIPlane.Severity severity = 4;
        if (has_severity()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                        unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CDTIPlane::MergeFrom(const ::google::protobuf::Message &from) {
    GOOGLE_CHECK_NE(&from, this);
    const CDTIPlane *source =
            ::google::protobuf::internal::dynamic_cast_if_available<const CDTIPlane *>(
                    &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void CDTIPlane::MergeFrom(const CDTIPlane &from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_id()) {
            set_id(from.id());
        }
        if (from.has_position()) {
            mutable_position()->::Vector::MergeFrom(from.position());
        }
        if (from.has_velocity()) {
            mutable_velocity()->::Vector::MergeFrom(from.velocity());
        }
        if (from.has_severity()) {
            set_severity(from.severity());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDTIPlane::CopyFrom(const ::google::protobuf::Message &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void CDTIPlane::CopyFrom(const CDTIPlane &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CDTIPlane::IsInitialized() const {
    if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

    if (has_position()) {
        if (!this->position().IsInitialized()) return false;
    }
    if (has_velocity()) {
        if (!this->velocity().IsInitialized()) return false;
    }
    return true;
}

void CDTIPlane::Swap(CDTIPlane *other) {
    if (other != this) {
        std::swap(id_, other->id_);
        std::swap(position_, other->position_);
        std::swap(velocity_, other->velocity_);
        std::swap(severity_, other->severity_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata CDTIPlane::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = CDTIPlane_descriptor_;
    metadata.reflection = CDTIPlane_reflection_;
    return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor *CDTIReport_Severity_descriptor() {
    protobuf_AssignDescriptorsOnce();
    return CDTIReport_Severity_descriptor_;
}

bool CDTIReport_Severity_IsValid(int value) {
    switch (value) {
        case 0:
        case 1:
        case 2:
            return true;
        default:
            return false;
    }
}

#ifndef _MSC_VER
const CDTIReport_Severity CDTIReport::PROXIMATE;
const CDTIReport_Severity CDTIReport::TRAFFIC;
const CDTIReport_Severity CDTIReport::RESOLUTION;
const CDTIReport_Severity CDTIReport::Severity_MIN;
const CDTIReport_Severity CDTIReport::Severity_MAX;
const int CDTIReport::Severity_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CDTIReport::kTimestampFieldNumber;
const int CDTIReport::kOwnshipFieldNumber;
const int CDTIReport::kAdvisoryMessageFieldNumber;
const int CDTIReport::kAdvisoryLevelFieldNumber;
const int CDTIReport::kPlanesFieldNumber;
#endif  // !_MSC_VER

CDTIReport::CDTIReport()
        : ::google::protobuf::Message() {
    SharedCtor();
    // @@protoc_insertion_point(constructor:CDTIReport)
}

void CDTIReport::InitAsDefaultInstance() {
    ownship_ = const_cast< ::CDTIPlane *>(&::CDTIPlane::default_instance());
}

CDTIReport::CDTIReport(const CDTIReport &from)
        : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:CDTIReport)
}

void CDTIReport::SharedCtor() {
    ::google::protobuf::internal::GetEmptyString();
    _cached_size_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    ownship_ = NULL;
    advisorymessage_ = const_cast< ::std::string *>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    advisorylevel_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTIReport::~CDTIReport() {
    // @@protoc_insertion_point(destructor:CDTIReport)
    SharedDtor();
}

void CDTIReport::SharedDtor() {
    if (advisorymessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        delete advisorymessage_;
    }
    if (this != default_instance_) {
        delete ownship_;
    }
}

void CDTIReport::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}

const ::google::protobuf::Descriptor *CDTIReport::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return CDTIReport_descriptor_;
}

const CDTIReport &CDTIReport::default_instance() {
    if (default_instance_ == NULL) protobuf_AddDesc_cdti_2eproto();
    return *default_instance_;
}

CDTIReport *CDTIReport::default_instance_ = NULL;

CDTIReport *CDTIReport::New() const {
    return new CDTIReport;
}

void CDTIReport::Clear() {
    if (_has_bits_[0 / 32] & 15) {
        timestamp_ = GOOGLE_LONGLONG(0);
        if (has_ownship()) {
            if (ownship_ != NULL) ownship_->::CDTIPlane::Clear();
        }
        if (has_advisorymessage()) {
            if (advisorymessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                advisorymessage_->clear();
            }
        }
        advisorylevel_ = 0;
    }
    planes_.Clear();
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool CDTIReport::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:CDTIReport)
    for (; ;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required sfixed64 timestamp = 1;
            case 1: {
                if (tag == 9) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                            input, &timestamp_)));
                    set_has_timestamp();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18)) goto parse_ownship;
                break;
            }

                // required .CDTIPlane ownship = 2;
            case 2: {
                if (tag == 18) {
                    parse_ownship:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                            input, mutable_ownship()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(26)) goto parse_advisoryMessage;
                break;
            }

                // optional string advisoryMessage = 3;
            case 3: {
                if (tag == 26) {
                    parse_advisoryMessage:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                            input, this->mutable_advisorymessage()));
                    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                            this->advisorymessage().data(), this->advisorymessage().length(),
                            ::google::protobuf::internal::WireFormat::PARSE,
                            "advisorymessage");
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(32)) goto parse_advisoryLevel;
                break;
            }

                // optional .CDTIReport.Severity advisoryLevel = 4;
            case 4: {
                if (tag == 32) {
                    parse_advisoryLevel:
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                            input, &value)));
                    if (::CDTIReport_Severity_IsValid(value)) {
                        set_advisorylevel(static_cast< ::CDTIReport_Severity >(value));
                    } else {
                        mutable_unknown_fields()->AddVarint(4, value);
                    }
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42)) goto parse_planes;
                break;
            }

                // repeated .CDTIPlane planes = 5;
            case 5: {
                if (tag == 42) {
                    parse_planes:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                            input, add_planes()));
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(42)) goto parse_planes;
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
                handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
        }
    }
    success:
    // @@protoc_insertion_point(parse_success:CDTIReport)
    return true;
    failure:
    // @@protoc_insertion_point(parse_failure:CDTIReport)
    return false;
#undef DO_
}

void CDTIReport::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const {
    // @@protoc_insertion_point(serialize_start:CDTIReport)
    // required sfixed64 timestamp = 1;
    if (has_timestamp()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->timestamp(), output);
    }

    // required .CDTIPlane ownship = 2;
    if (has_ownship()) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                2, this->ownship(), output);
    }

    // optional string advisoryMessage = 3;
    if (has_advisorymessage()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                this->advisorymessage().data(), this->advisorymessage().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE,
                "advisorymessage");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                3, this->advisorymessage(), output);
    }

    // optional .CDTIReport.Severity advisoryLevel = 4;
    if (has_advisorylevel()) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(
                4, this->advisorylevel(), output);
    }

    // repeated .CDTIPlane planes = 5;
    for (int i = 0; i < this->planes_size(); i++) {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                5, this->planes(i), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:CDTIReport)
}

::google::protobuf::uint8 *CDTIReport::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8 *target) const {
    // @@protoc_insertion_point(serialize_to_array_start:CDTIReport)
    // required sfixed64 timestamp = 1;
    if (has_timestamp()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->timestamp(), target);
    }

    // required .CDTIPlane ownship = 2;
    if (has_ownship()) {
        target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(
                2, this->ownship(), target);
    }

    // optional string advisoryMessage = 3;
    if (has_advisorymessage()) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                this->advisorymessage().data(), this->advisorymessage().length(),
                ::google::protobuf::internal::WireFormat::SERIALIZE,
                "advisorymessage");
        target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                        3, this->advisorymessage(), target);
    }

    // optional .CDTIReport.Severity advisoryLevel = 4;
    if (has_advisorylevel()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                4, this->advisorylevel(), target);
    }

    // repeated .CDTIPlane planes = 5;
    for (int i = 0; i < this->planes_size(); i++) {
        target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(
                5, this->planes(i), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:CDTIReport)
    return target;
}

int CDTIReport::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // required sfixed64 timestamp = 1;
        if (has_timestamp()) {
            total_size += 1 + 8;
        }

        // required .CDTIPlane ownship = 2;
        if (has_ownship()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                                  this->ownship());
        }

        // optional string advisoryMessage = 3;
        if (has_advisorymessage()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->advisorymessage());
        }

        // optional .CDTIReport.Severity advisoryLevel = 4;
        if (has_advisorylevel()) {
            total_size += 1 +
                          ::google::protobuf::internal::WireFormatLite::EnumSize(this->advisorylevel());
        }

    }
    // repeated .CDTIPlane planes = 5;
    total_size += 1 * this->planes_size();
    for (int i = 0; i < this->planes_size(); i++) {
        total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                        this->planes(i));
    }

    if (!unknown_fields().empty()) {
        total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                        unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void CDTIReport::MergeFrom(const ::google::protobuf::Message &from) {
    GOOGLE_CHECK_NE(&from, this);
    const CDTIReport *source =
            ::google::protobuf::internal::dynamic_cast_if_available<const CDTIReport *>(
                    &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void CDTIReport::MergeFrom(const CDTIReport &from) {
    GOOGLE_CHECK_NE(&from, this);
    planes_.MergeFrom(from.planes_);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_timestamp()) {
            set_timestamp(from.timestamp());
        }
        if (from.has_ownship()) {
            mutable_ownship()->::CDTIPlane::MergeFrom(from.ownship());
        }
        if (from.has_advisorymessage()) {
            set_advisorymessage(from.advisorymessage());
        }
        if (from.has_advisorylevel()) {
            set_advisorylevel(from.advisorylevel());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDTIReport::CopyFrom(const ::google::protobuf::Message &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void CDTIReport::CopyFrom(const CDTIReport &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CDTIReport::IsInitialized() const {
    if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

    if (has_ownship()) {
        if (!this->ownship().IsInitialized()) return false;
    }
    if (!::google::protobuf::internal::AllAreInitialized(this->planes())) return false;
    return true;
}

void CDTIReport::Swap(CDTIReport *other) {
    if (other != this) {
        std::swap(timestamp_, other->timestamp_);
        std::swap(ownship_, other->ownship_);
        std::swap(advisorymessage_, other->advisorymessage_);
        std::swap(advisorylevel_, other->advisorylevel_);
        planes_.Swap(&other->planes_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata CDTIReport::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = CDTIReport_descriptor_;
    metadata.reflection = CDTIReport_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
