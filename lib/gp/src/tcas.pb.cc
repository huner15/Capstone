// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION

#include "tcas.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

    const ::google::protobuf::Descriptor *TcasReport_descriptor_ = NULL;
    const ::google::protobuf::internal::GeneratedMessageReflection *
            TcasReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tcas_2eproto() {
    protobuf_AddDesc_tcas_2eproto();
    const ::google::protobuf::FileDescriptor *file =
            ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                    "tcas.proto");
    GOOGLE_CHECK(file != NULL);
    TcasReport_descriptor_ = file->message_type(0);
    static const int TcasReport_offsets_[4] = {
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcasReport, id_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcasReport, range_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcasReport, altitude_),
            GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcasReport, bearing_),
    };
    TcasReport_reflection_ =
            new ::google::protobuf::internal::GeneratedMessageReflection(
                    TcasReport_descriptor_,
                    TcasReport::default_instance_,
                    TcasReport_offsets_,
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcasReport, _has_bits_[0]),
                    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcasReport, _unknown_fields_),
                    -1,
                    ::google::protobuf::DescriptorPool::generated_pool(),
                    ::google::protobuf::MessageFactory::generated_factory(),
                    sizeof(TcasReport));
}

namespace {

    GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);

    inline void protobuf_AssignDescriptorsOnce() {
        ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                           &protobuf_AssignDesc_tcas_2eproto);
    }

    void protobuf_RegisterTypes(const ::std::string &) {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                TcasReport_descriptor_, &TcasReport::default_instance());
    }

}  // namespace

void protobuf_ShutdownFile_tcas_2eproto() {
    delete TcasReport::default_instance_;
    delete TcasReport_reflection_;
}

void protobuf_AddDesc_tcas_2eproto() {
    static bool already_here = false;
    if (already_here) return;
    already_here = true;
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            "\n\ntcas.proto\"J\n\nTcasReport\022\n\n\002id\030\001 \002(\017\022\r"
                    "\n\005range\030\002 \002(\017\022\020\n\010altitude\030\003 \002(\017\022\017\n\007beari"
                    "ng\030\004 \002(\017B#\n\033edu.calpoly.capstone.sensorB"
                    "\004Tcas", 125);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "tcas.proto", &protobuf_RegisterTypes);
    TcasReport::default_instance_ = new TcasReport();
    TcasReport::default_instance_->InitAsDefaultInstance();
    ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tcas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tcas_2eproto {
    StaticDescriptorInitializer_tcas_2eproto() {
        protobuf_AddDesc_tcas_2eproto();
    }
} static_descriptor_initializer_tcas_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TcasReport::kIdFieldNumber;
const int TcasReport::kRangeFieldNumber;
const int TcasReport::kAltitudeFieldNumber;
const int TcasReport::kBearingFieldNumber;
#endif  // !_MSC_VER

TcasReport::TcasReport()
        : ::google::protobuf::Message() {
    SharedCtor();
    // @@protoc_insertion_point(constructor:TcasReport)
}

void TcasReport::InitAsDefaultInstance() {
}

TcasReport::TcasReport(const TcasReport &from)
        : ::google::protobuf::Message() {
    SharedCtor();
    MergeFrom(from);
    // @@protoc_insertion_point(copy_constructor:TcasReport)
}

void TcasReport::SharedCtor() {
    _cached_size_ = 0;
    id_ = 0;
    range_ = 0;
    altitude_ = 0;
    bearing_ = 0;
    ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcasReport::~TcasReport() {
    // @@protoc_insertion_point(destructor:TcasReport)
    SharedDtor();
}

void TcasReport::SharedDtor() {
    if (this != default_instance_) {
    }
}

void TcasReport::SetCachedSize(int size) const {
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}

const ::google::protobuf::Descriptor *TcasReport::descriptor() {
    protobuf_AssignDescriptorsOnce();
    return TcasReport_descriptor_;
}

const TcasReport &TcasReport::default_instance() {
    if (default_instance_ == NULL) protobuf_AddDesc_tcas_2eproto();
    return *default_instance_;
}

TcasReport *TcasReport::default_instance_ = NULL;

TcasReport *TcasReport::New() const {
    return new TcasReport;
}

void TcasReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TcasReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

    ZR_(id_, bearing_);

#undef OFFSET_OF_FIELD_
#undef ZR_

    ::memset(_has_bits_, 0, sizeof(_has_bits_));
    mutable_unknown_fields()->Clear();
}

bool TcasReport::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:TcasReport)
    for (; ;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
        tag = p.first;
        if (!p.second) goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // required sfixed32 id = 1;
            case 1: {
                if (tag == 13) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                            input, &id_)));
                    set_has_id();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(21)) goto parse_range;
                break;
            }

                // required sfixed32 range = 2;
            case 2: {
                if (tag == 21) {
                    parse_range:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                            input, &range_)));
                    set_has_range();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(29)) goto parse_altitude;
                break;
            }

                // required sfixed32 altitude = 3;
            case 3: {
                if (tag == 29) {
                    parse_altitude:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                            input, &altitude_)));
                    set_has_altitude();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(37)) goto parse_bearing;
                break;
            }

                // required sfixed32 bearing = 4;
            case 4: {
                if (tag == 37) {
                    parse_bearing:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                            ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                            input, &bearing_)));
                    set_has_bearing();
                } else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
                handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                        input, tag, mutable_unknown_fields()));
                break;
            }
        }
    }
    success:
    // @@protoc_insertion_point(parse_success:TcasReport)
    return true;
    failure:
    // @@protoc_insertion_point(parse_failure:TcasReport)
    return false;
#undef DO_
}

void TcasReport::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream *output) const {
    // @@protoc_insertion_point(serialize_start:TcasReport)
    // required sfixed32 id = 1;
    if (has_id()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->id(), output);
    }

    // required sfixed32 range = 2;
    if (has_range()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->range(), output);
    }

    // required sfixed32 altitude = 3;
    if (has_altitude()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->altitude(), output);
    }

    // required sfixed32 bearing = 4;
    if (has_bearing()) {
        ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->bearing(), output);
    }

    if (!unknown_fields().empty()) {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:TcasReport)
}

::google::protobuf::uint8 *TcasReport::SerializeWithCachedSizesToArray(
        ::google::protobuf::uint8 *target) const {
    // @@protoc_insertion_point(serialize_to_array_start:TcasReport)
    // required sfixed32 id = 1;
    if (has_id()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->id(), target);
    }

    // required sfixed32 range = 2;
    if (has_range()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->range(), target);
    }

    // required sfixed32 altitude = 3;
    if (has_altitude()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->altitude(), target);
    }

    // required sfixed32 bearing = 4;
    if (has_bearing()) {
        target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->bearing(), target);
    }

    if (!unknown_fields().empty()) {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:TcasReport)
    return target;
}

int TcasReport::ByteSize() const {
    int total_size = 0;

    if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        // required sfixed32 id = 1;
        if (has_id()) {
            total_size += 1 + 4;
        }

        // required sfixed32 range = 2;
        if (has_range()) {
            total_size += 1 + 4;
        }

        // required sfixed32 altitude = 3;
        if (has_altitude()) {
            total_size += 1 + 4;
        }

        // required sfixed32 bearing = 4;
        if (has_bearing()) {
            total_size += 1 + 4;
        }

    }
    if (!unknown_fields().empty()) {
        total_size +=
                ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                        unknown_fields());
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = total_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void TcasReport::MergeFrom(const ::google::protobuf::Message &from) {
    GOOGLE_CHECK_NE(&from, this);
    const TcasReport *source =
            ::google::protobuf::internal::dynamic_cast_if_available<const TcasReport *>(
                    &from);
    if (source == NULL) {
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    } else {
        MergeFrom(*source);
    }
}

void TcasReport::MergeFrom(const TcasReport &from) {
    GOOGLE_CHECK_NE(&from, this);
    if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
        if (from.has_id()) {
            set_id(from.id());
        }
        if (from.has_range()) {
            set_range(from.range());
        }
        if (from.has_altitude()) {
            set_altitude(from.altitude());
        }
        if (from.has_bearing()) {
            set_bearing(from.bearing());
        }
    }
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcasReport::CopyFrom(const ::google::protobuf::Message &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void TcasReport::CopyFrom(const TcasReport &from) {
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool TcasReport::IsInitialized() const {
    if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

    return true;
}

void TcasReport::Swap(TcasReport *other) {
    if (other != this) {
        std::swap(id_, other->id_);
        std::swap(range_, other->range_);
        std::swap(altitude_, other->altitude_);
        std::swap(bearing_, other->bearing_);
        std::swap(_has_bits_[0], other->_has_bits_[0]);
        _unknown_fields_.Swap(&other->_unknown_fields_);
        std::swap(_cached_size_, other->_cached_size_);
    }
}

::google::protobuf::Metadata TcasReport::GetMetadata() const {
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::Metadata metadata;
    metadata.descriptor = TcasReport_descriptor_;
    metadata.reflection = TcasReport_reflection_;
    return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
